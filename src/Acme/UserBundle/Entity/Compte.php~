<?php

namespace Acme\UserBundle\Entity;

use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;

use Symfony\Component\Validator\Mapping\ClassMetadata;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Constraints\NotBlank;

/**
 * @ORM\Entity
 * @ORM\Table(name="cpt_bancaire")
 */
class Compte
{
    /**
     * @var Id
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    public function __construct()
    {

    }

    /**
     * @var Nom
     * @ORM\Column(type="string")
     */
    protected $nom;

    /**
     * @var NumeroCompte
     * @ORM\Column(type="string")
     */
    protected $numeroCompte;


    /**
     * @ORM\OneToMany(targetEntity="OperationBancaire", mappedBy="compteId", cascade={"remove", "persist"})
     */
    protected $operationBancaire;

    /**
     * @ORM\OneToMany(targetEntity="Seuil", mappedBy="compteId", cascade={"remove", "persist"})
     */
    protected $seuil;

    /**
     * @var User
     * @ORM\ManyToOne(targetEntity="User")
     **/
    protected $user;

    /**
     * @var Actif
     * @ORM\Column(type="boolean")
     */
    protected $actif = 1;

    /**
     * Get id
     *
     * @return integer 
     */
    

    public static function loadValidatorMetadata(ClassMetadata $metadata)
    {
        $metadata->addPropertyConstraint('nom', new NotBlank());
        $metadata->addPropertyConstraint('nom', new Assert\Regex(array(
            'pattern' => '/^[a-zA-z0-9]+/',
            'message' => 'Le champ ne peut contenir que des caractères alphanumeriques',
        )));

        $metadata->addPropertyConstraint('numeroCompte', new NotBlank());
        $metadata->addPropertyConstraint('numeroCompte', new Assert\Regex(array(
            'pattern' => '/^[a-zA-z0-9]+/',
            'message' => 'Le champ ne peut contenir que des caractères alphanumeriques',
        )));
    }

    
}
